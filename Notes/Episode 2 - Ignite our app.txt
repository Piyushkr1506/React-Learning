-> git and github
-> how to host our code on github (setup SSH)
-> NPM init

-> package.json
It's a configuration for NPM, it keeps a track of what version that package 
is installed into our system. 

->package-lock.json
It contains exact version of package that is installed.

-> dev dependency (npm install -D parcel) and normal depenedency

-> caret(^) and tilde(~)
caret means if there is monior upgrade, install that also.
tilde means to install if there is major upgrade.

-> Transitive depenedency
we have install some packages let's say parcel, so parcelhas it's own dependency
and that some dependency has it's own dependency. Every dependency has it's own 
package.json file.

-> We need to put package.json and package-lock.json file on github
but, we don't need to put node_modules on github because it's super large
files, so we need to put it into file (.gitignore) write like /node_modules
We can regenerate node_moduled by "npm install". So, whatever we can regenerate
don't need to put on github.

-> we have to write "npm" to install any package and write "npx" to execute any package.
ex: npx parcel index.html 

-> npm install react
-> npm install react-dom

-> Parcel is a newer bundler that has gained popularity in recent years.
-> If you need to manage a large codebase with multiple modules and want to optimize the output for performance, 
Its modular approach and wide range of plugins make it an incredibly powerful tool for modern web development.

->One of its most significant advantages is its ease of use. Parcel requires very little configuration 
and can be used out of the box with no additional setup. 
This makes it an excellent choice for small projects or developers who are just getting started with bundlers.

-> parcel created Dev Build for you
-> parcel created local server for you
-> Parcel is automatically refreshing your page
-> HMR - Hot Module Replacement
->Parcel uses "File Watching Algorithm" written in C++
-> Parcel uses caching for faster builds.
-> Parcel will do image optimization also.
-> Parcel will do minification of files.
-> Parcel will do Bundling.
-> Parcel will do Compressing.
-> Consistent hashing
-> Code Spilitting
-> Differential Bundling - to support older browsers
-> Diagnostic
-> Error Handling
-> Tree Shaking - remove unused code.


##############################################################

## What is NPM??

Node package manager (npm) is a package manager and a software register but it's also a place where developers can find, 
build and manage code packages. Right now, npm contains over 800,000 packages for various applications, from front-end and robotics to mobile apps.

--------------------------------------------------------------

## 

📦🔗 What is `.parcel-cache`? 🤔

👋 Hey LinkedIn fam! Today, let's talk about the mysterious `.parcel-cache` directory that you might have come across in your web development projects. 📂🚀

🔍 `.parcel-cache` is a directory generated by the Parcel bundler, a popular tool used for bundling and optimizing web applications. It serves a specific purpose in the build process. Let's explore! 💡

✨ Parcel, as a zero-configuration bundler, aims to provide a seamless development experience. To achieve this, it employs an intelligent caching mechanism. When Parcel bundles your project for the first time, it creates the `.parcel-cache` directory to store cached data. 📦🔒

🔀 The purpose of this cache directory is to speed up subsequent builds. Parcel analyzes your project's dependencies, transformations, and optimizations, and stores the results in the cache. This way, if you make changes to your code and trigger a rebuild, Parcel can quickly retrieve the cached data and only process the modified parts, saving time and resources. 🕒⚡

💡 Why is `.parcel-cache` useful?
1️⃣ Faster Builds: By caching the intermediate results, Parcel avoids redoing expensive computations, leading to significantly faster build times. ⚡🚀

2️⃣ Efficient Development Workflow: With the help of caching, Parcel intelligently determines which parts of your codebase require reprocessing, allowing for a smoother development experience. 🔄💻

3️⃣ Reduced Resource Usage: The cache minimizes the utilization of system resources, such as CPU and memory, as it avoids unnecessary operations during subsequent builds. 💪💾

🔒 It's worth noting that the `.parcel-cache` directory is automatically managed by Parcel, and you generally don't need to interact with it directly. However, if you encounter issues related to caching, clearing the cache by deleting the directory can often resolve them. 🗑️🚧

In summary, `.parcel-cache` is a directory generated by the Parcel bundler, serving as a cache for storing intermediate build results. It enhances the development workflow by speeding up subsequent builds and optimizing resource usage. ⚙️✨

Have you encountered the `.parcel-cache` directory in your projects? Share your experiences in the comments below! 👇😊


https://www.linkedin.com/in/atharvabhatnagar/recent-activity/all/







